import React, { useState, useEffect } from 'react';
import '../App.css';

const LoadingScreen = ({ onComplete }) => {
  const [progress, setProgress] = useState(0);
  const [currentStep, setCurrentStep] = useState(0);
  
  const steps = [
    '–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...',
    '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å...',
    '–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É...',
    '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥...',
    '–ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É...'
  ];

  useEffect(() => {
    const duration = 7000; // 7 —Å–µ–∫—É–Ω–¥
    const interval = 100; // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å
    const totalSteps = duration / interval;
    let currentStepCount = 0;

    const timer = setInterval(() => {
      currentStepCount++;
      const newProgress = (currentStepCount / totalSteps) * 100;
      setProgress(newProgress);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
      const stepIndex = Math.floor((newProgress / 100) * steps.length);
      setCurrentStep(Math.min(stepIndex, steps.length - 1));

      if (currentStepCount >= totalSteps) {
        clearInterval(timer);
        setTimeout(() => {
          onComplete();
        }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
      }
    }, interval);

    return () => clearInterval(timer);
  }, [onComplete]);

  return (
    <div className="loading-screen">
      <div className="loading-container">
        <div className="loading-logo">
          <div className="logo-animation">
            <div className="logo-circle"></div>
            <div className="logo-circle"></div>
            <div className="logo-circle"></div>
          </div>
        </div>
        
        <h2 className="loading-title">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OnMe!</h2>
        <p className="loading-subtitle">–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç</p>
        
        <div className="loading-progress">
          <div className="progress-bar">
            <div 
              className="progress-fill" 
              style={{ width: `${progress}%` }}
            ></div>
          </div>
          <div className="progress-text">{Math.round(progress)}%</div>
        </div>
        
        <div className="loading-steps">
          <div className="current-step">{steps[currentStep]}</div>
          <div className="step-dots">
            {steps.map((step, index) => (
              <div 
                key={index} 
                className={`step-dot ${index <= currentStep ? 'active' : ''}`}
              ></div>
            ))}
          </div>
        </div>
        
        <div className="loading-tips">
          <div className="tip-item">
            <span className="tip-icon">üí°</span>
            <span className="tip-text">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</span>
          </div>
          <div className="tip-item">
            <span className="tip-icon">üìä</span>
            <span className="tip-text">–ò–∑—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</span>
          </div>
          <div className="tip-item">
            <span className="tip-icon">üìÖ</span>
            <span className="tip-text">–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoadingScreen; 